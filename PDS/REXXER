/****REXX**********************************************************/
/*                                                                */
/*   invoked as :  REXXER from an EDIT or VIEW session only       */
/*                                                                */
/*  Invokes REXX Compiler, reads error messages, and places them  */
/*  into the source listing.                                      */
/*                                                                */
/******************************************************************/
/*                                                                */
/*  Copyright 1997  Expert System Programming                     */
/*  This program may be used at will except for profit, in        */
/*  accordance with the GNU COPYLEFT provisions.                  */
/*                                                                */
/******************************************************************/
/*                                                                */
/*  CUSTOMIZATION: Find REXXLIB and set applicable compiler load  */
/*                                                                */
/******************************************************************/
/*                                                                */
/*  Maintenance:                                                  */
/*                                                                */
/*  1999/10/25 @g1  GYP  Fixed SCLM 013-18 error (unmodified mbr  */
/*                       request - code in different library)     */
/*  2003/10/25 @g2  GYP  Added SYSPRINT scan for external functs  */
/*                       when no error - catch spelling errors.   */
/*                       Fix empty file or pending command.       */
/*                                                                */
/******************************************************************/
"ISREDIT MACRO (string) PROCESS"  /* ISPF - process changes first */
  if RC=20 then do                /* from TSO?                    */
              say "REXXER must be invoked under ISPF EDIT or VIEW"
              exit 20
              end
        else do
              UPPER string
              if string="" then string = "*" /* print current     */
              end

  msg_op = "No problems"          /* Preset for normal run        */
  msg_rc = 0
  msg_a1 = ""
  msg_a2 = ""

  dbug = 0                        /* Off debug and list switches  */
  dlst = 0                        /* Off debug and list switches  */
  dsnm = ""                       /* Provisionally use current ds */

scanned = 0
do while scanned=0                /* Look for option overrides    */
  PARSE VAR string w1 string
  select;
    when w1="" then scanned = 1

    when w1="DEBUG" then dbug = 1
    when w1="LIST" then dlst = 1

    when w1="TRACE" then TRACE R

    otherwise nop                 /* defer - may be misspelled ?  */
    end
 end

REXXLIB = "FAN130.SFANLMD"      /* My OS/390 2.10  REXX Load Library */
/* REXXLIB = "REXX.SFANLMD" */  /* Preferred alias REXX Load Library */

lc = SYSDSN("'"REXXLIB"'")        /* Correct name in this system? */
if lc\="OK" then do
  msg_rc = 12
  zedsmsg = "No REXX loadlib"
  zedlmsg = "Compiler library" rexxlib "unavailable : "lc
  "ISPEXEC SETMSG MSG(ISRZ001)"
  signal Comm_Out
  end  /* if lc */

/*******************************************************************/
/*                                                                 */
/*  1) If the data in the current EDIT session were changed, then  */
/*     we need to read the lines and build a SUBMIT SYSIN          */
/*                                                                 */
/*  2) If the underlying data set does not exist (happens when not */
/*     saved yet, or in an SCLM or similar environment when not    */
/*     changed), then we need to read the lines and build a SYSIN  */
/*                                                                 */
/*  The above fails when the data lines are longer than 255 bytes! */
/*                                                                 */
/*  Otherwise, build a SYSIN to point to the unchanged data set.   */
/*                                                                 */
/*******************************************************************/
"ISREDIT (CHF) = DATA_CHANGED"
if CHF="NO" then do
    "ISREDIT (ds) = DATASET"
    if rc\=0 then ds = ""
    "ISREDIT (mb) = MEMBER"
    if rc\=0 then ds = ""
    if ds\="" then dsnm = ds
    if mb\="" & ds\="" then dsnm = dsnm"("mb")"
    if SYSDSN("'"dsnm"'")\="OK" then dsnm = ""                   /*g1*/
    end  /* if CHF */             /* data set unchanged & usable  */
                                  /* when dsnm not null           */
drop CD.
CD.0 = 0                          /* Avoid bad arith. conversion  */
CD. = ""                          /* Stem holding SYSIN data      */
cd_k = 0

if dsnm="" then do                /* Changed data - do it in-line */
  "ISREDIT (linef) = LINENUM .ZFIRST"
  "ISREDIT (linel) = LINENUM .ZLAST"
  if datatype(linef,"W")\=1 | datatype(linel,"W")\=1 then do     /*@g2*/
    msg_rc = 12                                                  /*@g2*/
    zedsmsg = "Untimely"                                         /*@g2*/
    zedlmsg = "File is empty, pending A/B/C/M command"           /*@g2*/
    "ISPEXEC SETMSG MSG(ISRZ001)"                                /*@g2*/
    signal Comm_Out                                              /*@g2*/
    end  /* datatype */                                          /*@g2*/
                                                                 /*@g2*/
  do i=linef to linel
    "ISREDIT (string) = LINE "i
    cd_k = cd_k+1
    cd.cd_k = string
    end  /* i */
  end  /* dsnm */

x = MSG("OFF")                    /* Don't want any messages      */
address TSO
"FREE FI(SYSIN)"                  /* Get rid of prior allocations */
"FREE FI(SYSTERM)"
"FREE FI(SYSPRINT)"
"FREE FI(SYSCEXEC)"
"FREE FI(SYSPUNCH)"
x = MSG("ON")

if dsnm\="" then do               /* Use existing data set        */
    "ALLOCATE FI(SYSIN) DA('"dsnm"') SHR REUSE"
    arc = rc
    end  /* then */
  else do                         /* Otherwise allocate and write */
    "ALLOCATE FI(SYSIN) NEW DELETE TRACKS SPACE(1 1) REUSE"||,
      " RECFM(V B)  LRECL(259)"
    arc = rc
    if arc=0 then do
      "EXECIO * DISKW SYSIN (stem CD. FINIS"
      if rc\=0 then do
        msg_op = "EXECIO DISKW"   /* Tell user about ALLOC error  */
        msg_rc = rc
        msg_a1 = "SYSIN"
        msg_a2 = ""
        signal bad_exit
        end  /* if rc */
        drop CD.
      end  /* if arc */
    end  /* else dsnm="" */
if arc\=0 then do
  msg_op = "ALLOC SYSIN"   /* Tell user about ALLOC error  */
  msg_rc = arc
  msg_a1 = "SYSIN"
  msg_a2 = ""
  signal bad_exit
  end  /* If rc */

"ALLOCATE FI(SYSTERM) NEW DELETE TRACKS SPACE(1 1) REUSE"
"ALLOCATE FI(SYSPRINT) NEW DELETE TRACKS SPACE(15 15) REUSE"     /*g2*/
/* "ALLOCATE FI(SYSPRINT) DUMMY REUSE" ********OLD*********/     /*g2*/
"ALLOCATE FI(SYSPUNCH) DUMMY REUSE"
"ALLOCATE FI(SYSCEXEC) DUMMY REUSE"

x = outtrap("REXXcall.")
REXX_parm = "XREF TERM TRACE SLINE"        /* Pass this parm to REXX */
"TSOEXEC CALL '"REXXLIB"(REXXCOMP)' '"REXX_parm"'"
arc = rc
x = outtrap("OFF")
    if arc<0 | arc>12 then do
      msg_op = "REXX COMPILE"
      msg_rc = arc
      msg_a1 = "Error"
      msg_a2 = ""
      signal bad_exit
      end

"EXECIO * DISKR SYSTERM  (stem Term. FINIS"
    if rc\=0 then do
      msg_op = "EXECIO DISKR"
      msg_rc = rc
      msg_a1 = "SYSTERM"
      msg_a2 = ""
      signal bad_exit
      end

"ISREDIT RESET"                   /* Remove old messages          */

curl = 0                          /* Line to position cursor on   */
msgl = 0                          /* Line to place error msg aftr */
errc = 0                          /* Error count                  */
que# = 0                          /* Number of stacked error msgs */
drop stack.                       /* Error message                */
stack. = ""                       /*               stack          */
drop exvar.                       /* External function            */
exvar. = ""                       /*                   stack       g2*/
exvars = 0                        /* Count of external functions   g2*/
exvar1 = 0                        /* Count with single reference   g2*/

/******* Now read the SYSTERM lines, and convert to messages *********/
l = term.0
if l>2 then k = 3                 /* Skip statistics              */
       else k = 1                 /* Don't know                   */

do j=k to l                       /* Loop through SYSTERM lines   */
  line = TERM.j                   /* Shortcut for stem lookups    */

  select                          /* Handle msgs and continuation */
    when left(strip(line),1)="|"   & msgl>0 then do
      text = substr(line,22)
      x = Msg_Stack(text)
      end  /* | */

    when left(strip(line),3)="+++" & msgl>0 then do
      text = delword(line,1,1)
      x = Msg_Stack(text)
      if curl=0 then do
          curl = msgl
          curp = pos("|",stack.1) /* Put cursor on bad character  */
          end /* if curl */
      end  /* +++ */

    when datatype(word(line,1),"W")=1 then do  /* New message ?   */
      call Msg_Write
      if msgl\=word(line,1) then errc = errc+1
      msgl = word(line,1)
      end  /* Line number */

    otherwise nop                 /* What ever                    */

  end  /* select */
 end  /* do j */
call Msg_Write   /* Final writes */

if curl\=0 then do                /* Set to display error count   */
    if errc=1 then plural = ""
              else plural = "s"
    zedsmsg = errc" error"plural" found"
    zedlmsg = errc" error"plural" found"
    "ISPEXEC SETMSG MSG(ISRZ000)"
    "ISREDIT CURSOR = "curl curp
    end  /* then */
  else do                         /* No errs - orphan functions?  */
    zedsmsg = "No errors found"
    zedlmsg = "No errors found"
    "ISPEXEC SETMSG MSG(ISRZ000)"

/*********************************REXX******************************/
/*                                                                 */
/*  No errors found - now read SYSPRINT to check for external      */
/*  references (could be misspelled when single use?)              */
/*                                                                 */
/*******************************************************************/
drop Term.                                                       /*g2*/
Term. = ""                                                       /*g2*/
"EXECIO * DISKR SYSPRINT (stem Term. FINIS"                      /*g2*/
    if rc\=0 then do                                             /*g2*/
      msg_op = "EXECIO DISKR"                                    /*g2*/
      msg_rc = rc                                                /*g2*/
      msg_a1 = "SYSPRINT"                                        /*g2*/
      msg_a2 = ""                                                /*g2*/
      signal bad_exit                                            /*g2*/
      end  /* if rc */                                           /*g2*/
                                                                 /*g2*/
    qv1 = " EXT "                                                /*g2*/
    qv2 = "RTN "                                                 /*g2*/
    "ISREDIT (linel) = LINENUM .ZLAST"                           /*g2*/
    do j=1 to term.0                                             /*g2*/
      if pos(qv1||qv2,substr(Term.j,31))>0 then do               /*g2*/
        line = Term.j                                            /*g2*/
        exvars = exvars + 1                                      /*g2*/
        ix = right(words(line)-3,7) || " "                       /*g2*/
        exvar.exvars = ix || word(line,1)                        /*g2*/
        if words(line)=4 then exvar1 = exvar1 + 1                /*g2*/
        if length(word(line,1))=30 then do                       /*g2*/
          ix = j + 1                                             /*g2*/
          line = Term.ix                                         /*g2*/
          if length(word(line,1))<31 & substr(line,32,8)="" then /*g2*/
            exvar.exvars = exvar.exvars || word(line,1)          /*g2*/
          if length(word(line,1))=30 then do                     /*g2*/
            ix = j + 2                                           /*g2*/
            line = Term.ix                                       /*g2*/
            if length(word(line,1))<31 & substr(line,32,8)="" then
              exvar.exvars = exvar.exvars || word(line,1)        /*g2*/
            end  /* do length 3rd */                             /*g2*/
          end  /* do length 2nd */                               /*g2*/
        end  /* ext var */                                       /*g2*/
      end  /* do */                                              /*g2*/
    do ix=exvars to 1 by -1                                      /*g2*/
      line = exvar.ix                                            /*g2*/
      "ISREDIT LINE_AFTER "linel" = MSGLINE (line)"              /*g2*/
      end  /* do */                                              /*g2*/
    if exvars>0 then do                                          /*g2*/
      line = right("Ref.Cnt",7) || " Name (max 63 chars)"        /*g2*/
      "ISREDIT LINE_AFTER "linel" = MSGLINE (line)"              /*g2*/
      if exvar1>0 then do                                        /*g2*/
        line = "Please check spelling."                          /*g2*/
        "ISREDIT LINE_AFTER "linel" = MSGLINE (line)"            /*g2*/
        end  /* exvar1 */                                        /*g2*/
    line = center(exvars" external references found in this program",72)
      "ISREDIT LINE_AFTER "linel" = MSGLINE (line)"              /*g2*/
      curp = 1                                                   /*g2*/
      "ISREDIT CURSOR = "linel curp                              /*g2*/
      end  /* do exvars */                                       /*g2*/
    end  /* else */                                              /*g2*/

signal Comm_Out


Bad_Exit:
    zedsmsg = "Processing error"
    zedlmsg = "Processing error in "msg_op", code "msg_rc||,
       ", for "msg_a1". "msg_a2
    "ISPEXEC SETMSG MSG(ISRZ001)"
signal Comm_Out

Comm_Out:
x = MSG("OFF")
address TSO
if dsnm\="" then "FREE DA('"dsnm"')"
"FREE FI(SYSIN)"
"FREE FI(SYSTERM)"
"FREE FI(SYSPRINT)"
"FREE FI(SYSCEXEC)"
"FREE FI(SYSPUNCH)"
x = MSG("ON")

trace off
exit msg_rc


/**********************************************************************/
/**                                                                  **/
/**  MSG_STACK :  Save error messages                                **/
/**                                                                  **/
/**********************************************************************/
Msg_Stack:
que# = que# + 1
stack.que# = arg(1)
return que#


/**********************************************************************/
/**                                                                  **/
/**  MSG_WRITE :  Insert error messages in proper sequence           **/
/**                                                                  **/
/**********************************************************************/
Msg_Write:
do ix=que# to 1 by -1
  text = stack.ix
  "ISREDIT LINE_AFTER "msgl" = MSGLINE (TEXT)"
  end

que# = 0
drop stack.
stack. = ""
return 0
